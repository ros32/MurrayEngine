#ifndef _ASSET_H
#define _ASSET_H

#include <string>

///-------------------------------------------------------------------------------------------------
/// <summary>	An Asset is an interface for an external resource used by the engine. </summary>
///
/// <remarks>	Rosen, 2016-02-28. </remarks>
///-------------------------------------------------------------------------------------------------
class Asset
{
public:

	///-------------------------------------------------------------------------------------------------
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Rosen, 2016-02-28. </remarks>
	///-------------------------------------------------------------------------------------------------
	Asset();

	///-------------------------------------------------------------------------------------------------
	/// <summary>	Destructor. </summary>
	///
	/// <remarks>	Rosen, 2016-02-28. </remarks>
	///-------------------------------------------------------------------------------------------------
	virtual ~Asset();

	///-------------------------------------------------------------------------------------------------
	/// <summary>	Gets the type. </summary>
	///
	/// <remarks>	Rosen, 2016-02-28. </remarks>
	///
	/// <returns>	The type. </returns>
	///-------------------------------------------------------------------------------------------------
	virtual std::string		getType() = 0;
};

#endif // !_ASSET_H
